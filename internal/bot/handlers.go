package bot

import (
	"TelegramToNotion/internal/notion"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) handleMessage(msg *tgbotapi.Message) {
	chatID := msg.Chat.ID

	switch {
	case msg.IsCommand() && msg.Command() == "start":
		b.sendWelcomeMessage(chatID)

	case msg.IsCommand() && msg.Command() == "new":
		b.startPageCreation(chatID)

	default:
		b.processUserInput(msg)
	}
}

func (b *Bot) handleCallback(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	switch {
	case strings.HasPrefix(data, "priority_"):
		b.state.SetPriority(chatID, strings.TrimPrefix(data, "priority_"))
		b.sendUrgencyKeyboard(chatID)

	case strings.HasPrefix(data, "urgency_"):
		b.state.SetUrgency(chatID, strings.TrimPrefix(data, "urgency_"))
		b.sendDateRequest(chatID)

	case strings.HasPrefix(data, "status_"):
		status, _ := strconv.ParseBool(strings.TrimPrefix(data, "status_"))
		b.state.SetStatus(chatID, status)
		b.completePageCreation(chatID)
	}

	b.api.Send(tgbotapi.NewCallback(callback.ID, ""))
}

func (b *Bot) sendWelcomeMessage(chatID int64) {
	text := "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Notion.\n" +
		"–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n" +
		"/new - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É\n" +
		"/help - –ø–æ–º–æ—â—å"

	msg := tgbotapi.NewMessage(chatID, text)
	b.api.Send(msg)
}

func (b *Bot) startPageCreation(chatID int64) {
	b.state.StartCreation(chatID)
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
	b.api.Send(msg)
}

func (b *Bot) processUserInput(msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	state := b.state.Get(chatID)

	if state == nil {
		return
	}

	switch state.Step {
	case "title":
		b.state.SetTitle(chatID, msg.Text)
		b.sendPriorityKeyboard(chatID)

	case "due_date":
		if b.state.SetDueDate(chatID, msg.Text) {
			b.sendStatusKeyboard(chatID)
		} else {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
			b.api.Send(msg)
		}
	}
}

func (b *Bot) completePageCreation(chatID int64) {
	state := b.state.Get(chatID)
	if state == nil {
		return
	}

	err := notion.CreatePage(b.config, state)
	if err != nil {
		log.Printf("Notion API error: %v", err)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion")
		b.api.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ Notion!")
		b.api.Send(msg)
	}

	b.state.Complete(chatID)
}

func (b *Bot) sendDateRequest(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "üìÖ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
	b.api.Send(msg)
}
